module PIM2PSM;
create OUT: PSMMetamodel from IN: PIMMetamodel;

uses Helpers;
-- -------------------------------------------------------------------------------------------

rule PIMService2PSMService {
	from
		s: PIMMetamodel!RESTfulServicePIM
	to
		t: PSMMetamodel!RESTfulServicePSM (
			name <- s.name,
			serviceOutputPath <- s.serviceOutputPath,
			serviceDatabaseIP <- s.serviceDatabaseIP,
			serviceDatabasePort <- s.serviceDatabasePort,
			serviceDatabaseUsername <- s.serviceDatabaseUsername,
			serviceDatabasePassword <- s.serviceDatabasePassword,
			
			hasCSharpRModel <- s.hasResourceModel,
			hasCSharpRMManager <- s.hasResourceModelManager,
			hasCSharpRController <- s.hasResourceController,
			hasCSharpRMController <- s.hasResourceControllerManager,
			hasEntityDatabaseController <- s.hasDatabaseController,
			hasCSharpAlgoResourceModel <- s.hasAlgoResourceModel,
			hasCSharpAlgoRController <- s.hasAlgoResourceController
		)
		
}

-- -------------------------------------------------------------------------------------------
rule getterFunction2CSharpPropertyGetter {
	from
		s: PIMMetamodel!GetterFunction
	to
		t: PSMMetamodel!CSharpPropertyGetter(
			getsProperty <- s.getsProperty	
		)
}

rule setterFunction2CSharpPropertySetter {
	from
		s: PIMMetamodel!SetterFunction
	to
		t: PSMMetamodel!CSharpPropertySetter(
			setsProperty <- s.setsProperty	
		)
}

-- --------------------------------------------------------------------------------------------
rule PIMComponentProperty2PSMComponentProperty {
	from
		s: PIMMetamodel!PIMComponentProperty
	to
		t: PSMMetamodel!PSMComponentProperty (
			name <- s.name,
			type <- s.type,
			bIsUnique <- s.isUnique,
			bIsPrimaryIdentifier <- s.isPrimaryIdentifier,
			correspondingField <- '_' + s.name,
			PropertyHasDataAnnotation <- dataContractAnnotation,
			PropertyHasEntityAnnotation <- Set{s} ->
				select(p | p.refImmediateComposite().oclIsTypeOf(PIMMetamodel!ResourceModel)) -> 
				collect(p | thisModule.createEntityAnnotationFromProperty(p))
		),
		dataContractAnnotation: PSMMetamodel!DataContractAnnotation(
				dataContractAnnotationText <- '[DataMember]'
		)
}

lazy rule createEntityAnnotationFromProperty {
	from
		s: PIMMetamodel!PIMComponentProperty
	to
		collumnEntityAnnotation: PSMMetamodel!EntityAnnotation (
			EntityAnnotationText <- s.createEntityAnnotationBasedOnColumn
		)
}

rule RDBMSTable2EntityAnnotation {
	from
		s: PIMMetamodel!RDBMSTable
	to
		t: PSMMetamodel!EntityAnnotation (
			EntityAnnotationText <- '[Table("' + s.name + '")]'
		)
}

-- -----------------------------------------------------------------------------------------------------

rule ResourceModel2CSharpResourceModel {
	from
		s: PIMMetamodel!ResourceModel
	using {
		
		fKeys : OrderedSet(PIMMetamodel!RDBMSTableColumn) = s.isMappedToRDBMSTable.hasRDBMSColumns -> select(f | f.isForeignKey);	
		counter : Integer = 0 ;
		}
	to
		t: PSMMetamodel!CSharpResourceModel (
			name <- s.parentName.toUpperFirst(),
			parentName <- s.parentName,
			CSharpRModelHasProperty <- s.rModelHasProperty
				-> append( fKeys -> collect (f | thisModule.foreignKeyProperty(f)))
				-> append( fKeys -> collect (f | thisModule.ManyToOneNavigationProperty(f)))
				-> append(s.hasRelatedModelManager -> collect(p | thisModule.oneToManyNavigationProperty(p))) ,
			CSharpRModelHasEntityAnnotation <- s.isMappedToRDBMSTable,
			CSharpRModelHasDataAnnotation <- dataContractAnnotation,
			hasRelatedCSharpAlgoModel <- s.hasRelatedAlgoModel,	
			hasRelatedCSharpRMManager <- s.hasRelatedModelManager,
			CSharpRModelHasGetter <- s.rModelHasGetter,
			CSharpRModelHasSetter <- s.rModelHasSetter
		),
		dataContractAnnotation: PSMMetamodel!DataContractAnnotation (
			dataContractAnnotationText <- '[DataContract]'		
		)
		do { 	-- Add getters and setters for every newly created property (could not find an easier or less complex way to do this)
			
			for (p in t.CSharpRModelHasProperty){
				
				if (not t.CSharpRModelHasGetter -> exists(g | g.getsProperty = p)) {
					thisModule.genGetter(p);
				}
				if (not t.CSharpRModelHasSetter -> exists(s | s.setsProperty = p)) {
					thisModule.genSetter(p);
				}					
			}
				t.CSharpRModelHasGetter <- t.CSharpRModelHasGetter -> union(thisModule.getters);
				thisModule.getters <- Bag{};
				t.CSharpRModelHasSetter <- t.CSharpRModelHasSetter -> union(thisModule.setters);
				thisModule.setters <- Bag{};
		}
}

-- --------------------------------------------------------------------------
rule genGetter(p : PSMMetamodel!PSMComponentProperty) {
	to
		t: PSMMetamodel!CSharpPropertyGetter
	do{
		t.getsProperty <- p ;
		thisModule.getters <- thisModule.getters -> including(t) ;
	}
}

rule genSetter(p : PSMMetamodel!PSMComponentProperty) {
	to
		t: PSMMetamodel!CSharpPropertySetter
	do{
		t.setsProperty <- p ;
		thisModule.setters <- thisModule.setters -> including(t) ;
	}
}
-- --------------------------------------------------------------------------

lazy rule oneToManyNavigationProperty {
	from 
		s: PIMMetamodel!ResourceModelManager
	to
		oneToManyPr: PSMMetamodel!PSMComponentProperty(
			name <- 'setOf' + s.parentName.toUpperFirst(),
			type <- s.parentName.toUpperFirst(),
			correspondingField <- '_setOf' + s.parentName,
			bIsNavigationProperty <- true
		)
}


lazy rule ManyToOneNavigationProperty {
	from 
		s: PIMMetamodel!RDBMSTableColumn
	using {
		referencedModel : PIMMetamodel!ResourceModel = s.getReferencedModelFromFK();
	}
	to
		t: PSMMetamodel!PSMComponentProperty (
			name <- referencedModel.parentName,
			type <- referencedModel.parentName.toUpperFirst(),
			bIsUnique <- true,
			PropertyHasEntityAnnotation <- foreignKeyAnnotation,
			correspondingField <- '_' + referencedModel.parentName + 'NavigationProperty',
			bIsNavigationProperty <- true
		),
		foreignKeyAnnotation: PSMMetamodel!EntityAnnotation (
			EntityAnnotationText <- '[ForeignKey("' + s.name + '")]'		
		)
}

lazy rule foreignKeyProperty {
	from 
		s: PIMMetamodel!RDBMSTableColumn
	to
		t: PSMMetamodel!PSMComponentProperty(
			name <- s.name,
			type <- s.type,
			bIsUnique <- true,
			correspondingField <- '_' + s.name,
			bIsForeignKey  <- true
		)	
	}

-- ----------------------------------------------------------------------

rule ResourceModelManager2CSharpResourceModelManager {
	from
		s: PIMMetamodel!ResourceModelManager
	to
		t: PSMMetamodel!CSharpResourceModelManager (
			name <- s.parentName.concat('Manager').toUpperFirst(),
			parentName <- s.parentName,
			CSharpRMManagerHasProperty <- s.hasRMManagerProperty,
			hasRelatedCSharpRModel <- s.hasRelatedModel,
			CSharpRMManagerHasGetter <- s.rMManagerHasGetter,
			CSharpRMManagerHasSetter <- s.rMManagerHasSetter,
			CSharpRMManagerHasDataAnnotation <- dataContractAnnotation
		),
		dataContractAnnotation: PSMMetamodel!DataContractAnnotation(
				dataContractAnnotationText <- '[DataContract]'
		)
}

rule ResourceController2CSharpResourceController {
	from
		s: PIMMetamodel!ResourceController
	to
		t: PSMMetamodel!CSharpResourceController (
			name <- s.name.toUpperFirst(),
			controllerURI <- s.controllerURI,
			parentName <- s.parentName,
			hasAssociatedCSharpRModel <- s.hasAssociatedRModel,
			CSharpRControllerHasAction <- s.rControllerHasCRUDActivity,
			CSharpRControllerHasARAnnotation <- ARAnnotation
		),
		ARAnnotation: PSMMetamodel!AttributeRoutingAnnotation (
			AttributeRoutingAnnotationText <- thisModule.createARAnnotationFromURI(s.controllerURI)	
		)
}

rule ResourceControllerManager2CSharpResourceManagerController {
	from
		s: PIMMetamodel!ResourceControllerManager
	to
		t: PSMMetamodel!CSharpResourceManagerController (
			name <- s.parentName.concat('ManagerController').toUpperFirst(),
			controllerURI <- s.controllerURI,
			parentName <- s.parentName,
			hasAssociatedCSharpRMManager <- s.hasAssociatedRMManager,
			CSharpRMControllerHasAction <- s.rCManagerHasCRUDActivity,
			CSharpRMControllerHasARAnnotation <- ARAnnotation
		),
		ARAnnotation: PSMMetamodel!AttributeRoutingAnnotation (
			AttributeRoutingAnnotationText <- thisModule.createARAnnotationFromURI(s.controllerURI)	
		)
}

rule DatabaseController2EntityDatabaseController {
	from
		s: PIMMetamodel!DatabaseController
	to
		t: PSMMetamodel!EntityDatabaseController (
			name <- s.name,
			hasEntityActivity <- s.hasRDBMSActivity
		)
}

rule ResourceControllerCRUDActivity2HTTPAction {
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity
	to
		t: PSMMetamodel!HTTPAction (
			name <- s.name,
			ActionHTTPVerb <- thisModule.getHTTPVerbFromCRUDVerb(s.crudVerb),
			HTTPActionURI <- s.activityURI,
			hasHTTPActionHandler <- s.hasCRUDActivityHandler,
			HTTPActionHasARAnnotation <- OrderedSet{routeAnnotation , methodAnnotation} ->
				append(Set{s} -> select(a | a.ActivityIsNotGETManager) -> collect(a | thisModule.createResponseTypeAnnotation(a)))
		),
		routeAnnotation: PSMMetamodel!AttributeRoutingAnnotation (
			AttributeRoutingAnnotationText <- '[Route("' + s.activityURI.substring( 2 , s.activityURI.size() ) + '")]'	
		),
		methodAnnotation: PSMMetamodel!AttributeRoutingAnnotation (
			AttributeRoutingAnnotationText <- thisModule.createARAnnotationFromHTTPMethod(s.crudVerb)
		)
}

lazy rule createResponseTypeAnnotation{
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity
	to
		responseTypeAnnotation: PSMMetamodel!AttributeRoutingAnnotation(
			AttributeRoutingAnnotationText <- s.createARAnnotationFromType
		)
}

-- ----------------------------------------------------
rule addParametersForResourceController extends ResourceControllerCRUDActivity2HTTPAction {
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity (s.refImmediateComposite().oclIsTypeOf(PIMMetamodel!ResourceController))
	using{
			uri : String = s.refImmediateComposite().controllerURI + s.activityURI;
		}
	to
		t: PSMMetamodel!HTTPAction(
			HTTPActionHasParameter <- OrderedSet{rt} -> 
			append(Set {s} -> 
				select(a | a.crudVerb = #UPDATE and thisModule.checkIfResourceContainerParameterExists(uri)) ->
				collect(a | thisModule.createContainerIdParameter(a))) ->
			append(pk) ->
			append(Set {s} -> 
				select(a | a.crudVerb = #UPDATE) ->
				collect(a | thisModule.createCSharpModelParameter(a)))
			
		),
		rt: PSMMetamodel!FunctionParameter(
			name <- ' ',
			type <-s.refImmediateComposite().hasAssociatedRModel.parentName.toUpperFirst(),
			bIsUnique <- true,
			bIsReturnParameter <- true
		),
		pk: PSMMetamodel!FunctionParameter(
			name <- thisModule.getTargetParameterFromUri(uri),
			type <- s.getResourceIdType(),
			bIsUnique <- true,
			bIsReturnParameter <- false
		)		
}

lazy rule createCSharpModelParameter{
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity
	using{
		uri : String = s.refImmediateComposite().controllerURI + s.activityURI;
	}	
	to
		mdl: PSMMetamodel!FunctionParameter(
			name <- s.getResourceParentName(),
			type <- s.getResourceParentName().toUpperFirst(),
			bIsUnique <- true,
			bIsReturnParameter <- false
		)
}

lazy rule createContainerIdParameter{
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity
	using{
			uri : String = s.refImmediateComposite().controllerURI + s.activityURI;
		}
	to
		mdl: PSMMetamodel!FunctionParameter(
			name <- thisModule.getContainerParameterFromUri(uri),
			type <- 'int',
			bIsUnique <- true,
			bIsReturnParameter <- false
		)
}
-- ----------------------------------------------------

rule addParametersForRManagerController extends ResourceControllerCRUDActivity2HTTPAction {
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity (s.refImmediateComposite().oclIsTypeOf(PIMMetamodel!ResourceControllerManager))
	using{
			uri : String = s.refImmediateComposite().controllerURI + s.activityURI;
		}
	to
		t: PSMMetamodel!HTTPAction(
			HTTPActionHasParameter <- OrderedSet{rt} -> 
			append(Set {s} -> 
				select(a | thisModule.checkIfManagerContainerParameterExists(uri)) -> 
				collect(a | thisModule.createContainerIdParameter(a))) ->
			append(Set {s} -> 
				select(a | a.crudVerb = #CREATE) ->
				collect(a | thisModule.createCSharpModelParameterFromManager(a)))	
		),
		rt: PSMMetamodel!FunctionParameter(
			name <- ' ',
			type <- s.getReturnTypeParameterForManager(),
			bIsUnique <- true,
			bIsReturnParameter <- true
		)
	}

lazy rule createCSharpModelParameterFromManager{
	from
		s: PIMMetamodel!ResourceControllerCRUDActivity
	to
		mdl: PSMMetamodel!FunctionParameter(
			name <- s.getResourceNamefromManager(),
			type <- s.getResourceNamefromManager().toUpperFirst(),
			bIsUnique <- true,
			bIsReturnParameter <- false
		)
}

-- ------------------------------------------------------------------------------
rule CRUDActivityHandler2HTTPActionHandler {
	from
		s: PIMMetamodel!CRUDActivityHandler
	to
		t: PSMMetamodel!HTTPActionHandler (
			name <- s.name.toUpperFirst(),
			HandlerHTTPVerb <- thisModule.getHTTPVerbFromCRUDVerb(s.crudVerb),
			hasHypermediaFunction <- s.hasHypermediaFunction,
			usesEntityActivity <- s.refImmediateComposite().isMappedToRDBMSActivity
			-- To WSATPIM den exei auth thn sysxetish (einai kai kapws pleonasmos)
		)
}

rule RDBMSActivity2EntityActivity {
	from
		s: PIMMetamodel!RDBMSActivity
	to
		t: PSMMetamodel!EntityActivity (
			name <- s.name,
			EntityActivityHTTPVerb <- thisModule.getHTTPVerbFromRDBMSVerb(s.rdbmsVerb)
		)
}

rule CreateHypermediaPIMFunction2CreateHypermediaPSMFunction {
	from
		s: PIMMetamodel!CreateHypermediaPIMFunction
	to
		t: PSMMetamodel!CreateHypermediaFunction (
			hasPSMHypermediaLink <- s.hasHypermediaLink
		)
}

rule PIMHypermediaLink2PSMHypermediaLink {
	from
		s: PIMMetamodel!HypermediaLink
	to
		t: PSMMetamodel!PSMHypermediaLink (
			linkHTTPVerb <- thisModule.getHTTPVerbFromCRUDVerb(s.linkCRUDVerb),
			linkType <- s.linkType,
			hasTargetCSharpRController <- s.hasTargetRController,
			hasTargetCSharpRMController <- s.hasTargetRCManager,
			hasTargetCSharpAlgoRController <- s.hasTargetAlgoController
		)
}

-- --------------------------------------------------------------------------------

rule algoResourceModel2CSharpAlgoResourceModel {
	from
		s: PIMMetamodel!AlgoResourceModel
	to
		t: PSMMetamodel!CSharpAlgoResourceModel(
			name <- s.name,
			parentName <- s.parentName,
			CSharpAlgoModelHasProperty <- s.algoModelHasProperty,
			CSharpAlgoModelHasGetter <- s.algoModelHasGetter,
			CSharpAlgoModelHasSetter <- s.algoModelHasSetter,
			isRelatedCSharpAlgoModel <- s.isRelatedAlgoModel,
			hasRelatedCSharpAlgoModel <- s.hasRelatedAlgoModel,
			CSharpAlgoRModelHasDataContractAnnotation <- dataContractAnnotation
		),
		dataContractAnnotation: PSMMetamodel!DataContractAnnotation (
			dataContractAnnotationText <- '[DataContract]'		
		)		
}

rule algoResourceController2CSharpAlgoResourceController {
	from
		s: PIMMetamodel!AlgoResourceController
	to
		t: PSMMetamodel!CSharpAlgoResourceController(
			name <- s.name,
			parentName <- s.parentName,
			hasAssociatedCSharpAlgoModel <- s.hasAssociatedAlgoModel,
			CSharpAlgoRChasHTTPAction <- s.algoControllerHasCRUDActivity,
			controllerURI <- s.controllerURI,
			CSharpAlgoRControllerHasARAnnotation <- ARAnnotation 
		),
		ARAnnotation: PSMMetamodel!AttributeRoutingAnnotation (
			AttributeRoutingAnnotationText <- thisModule.createARAnnotationFromURI(s.controllerURI)	
		)
}


